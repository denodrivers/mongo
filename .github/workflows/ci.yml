name: ci

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macOS-latest, windows-2019, ubuntu-16.04]
        kind: ["test", "lint"]

    steps:
      - name: Clone repository
        uses: actions/checkout@v1

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.41.0"

      - name: Install clippy and rustfmt
        if: matrix.kind == 'lint'
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Install Deno
        uses: denolib/setup-deno@master
        with:
          deno-version: 0.35.0

      - name: Start MongoDB (MacOs)
        if: matrix.kind == 'test' && startsWith(matrix.os, 'mac')
        run: |
          brew tap mongodb/brew
          brew install mongodb-community@4.2
          brew services start mongodb-community@4.2

      - name: Start MongoDB (Linux)
        if: matrix.kind == 'test' && startsWith(matrix.os, 'ubuntu')
        uses: wbari/start-mongoDB@v0.2
        with:
          mongoDBVersion: 4.2

      - name: Start MongoDB (Windows)
        if: matrix.kind == 'test' && startsWith(matrix.os, 'windows')
        run: |
          choco install mongodb --version=4.2.0 --no-progress
          "C:\Program Files\MongoDB\Server\4.2.0\bin\mongo.exe"

      - name: Environment (common)
        run: |
          echo ::set-env name=GH_ACTIONS::1
          echo ::set-env name=DENO_BUILD_MODE::release
          echo ::set-env name=RUST_BACKTRACE::full
      - name: Log versions
        run: |
          node -v
          rustc --version
          cargo --version

      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ matrix.kind }}-${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      # Fix the problem that the second build of windows will fail
      - name: Remove Some Cache
        if: matrix.os == 'windows-2019'
        run: |
          rm target/release/gn_root -Recurse -ErrorAction Ignore
          rm target/debug/gn_root -Recurse -ErrorAction Ignore

      - name: Install python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7.x"
          architecture: x64

      - name: Clippy
        if: matrix.kind == 'lint'
        run: cargo clippy --all-targets --release --locked -- -D clippy::all
      - name: Build
        if: matrix.kind == 'test'
        run: cargo build --release --locked --all-targets
      - name: Test Rust
        if: matrix.kind == 'test'
        run: cargo test --release --locked --all-targets
      - name: Test TS
        if: matrix.kind == 'test'
        run: deno run -A ./test.ts

      - name: Release
        uses: softprops/action-gh-release@v1
        if: matrix.kind == 'test' && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/release/libdeno_mongo.dylib
            target/release/libdeno_mongo.so
            target/release/deno_mongo.dll

      - name: Release Master(Linux)
        uses: WebFreak001/deploy-nightly@v1.0.1
        if: startsWith(matrix.os, 'ubuntu') && matrix.kind == 'test' && startsWith(github.ref, 'refs/heads/master')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/manyuanrong/deno_mongo/releases/master/assets{?name,label}
          release_id: master
          asset_path: target/release/libdeno_mongo.so
          asset_name: libdeno_mongo.so
          asset_content_type: application/octet-stream
          max_releases: 1

      - name: Release Master(Mac)
        uses: WebFreak001/deploy-nightly@v1.0.1
        if: startsWith(matrix.os, 'mac') && matrix.kind == 'test' && startsWith(github.ref, 'refs/heads/master')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/manyuanrong/deno_mongo/releases/master/assets{?name,label}
          release_id: master
          asset_path: target/release/libdeno_mongo.dylib
          asset_name: libdeno_mongo.dylib
          asset_content_type: application/octet-stream
          max_releases: 1

      - name: Release Master(Windows)
        uses: WebFreak001/deploy-nightly@v1.0.1
        if: startsWith(matrix.os, 'windows') && matrix.kind == 'test' && startsWith(github.ref, 'refs/heads/master')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/manyuanrong/deno_mongo/releases/master/assets{?name,label}
          release_id: master
          asset_path: target/release/deno_mongo.dll
          asset_name: deno_mongo.dll
          asset_content_type: application/octet-stream
          max_releases: 1
